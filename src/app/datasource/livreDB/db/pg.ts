import debug from "debug";
import { Pool } from "pg";
import { DatabaseClient } from "../../../../types";

// Configuration du logger avec le namespace "app:restodb" pour le debugging
const logger = debug("app:restodb");

// Cr√©ation du pool de connexions PostgreSQL
// Le pool g√®re automatiquement les connexions multiples et leur r√©utilisation
const pool = new Pool();

// Compteur pour tracer le nombre de requ√™tes ex√©cut√©es
let queryCount = 0;

// IIFE (Immediately Invoked Function Expression) pour initialiser la connexion
// Fonction asynchrone qui s'ex√©cute imm√©diatement au chargement du module
(async function () {
    try {
        // Test de connexion √† la base de donn√©es
        await pool.connect();
        logger("üìö Connected to database");
    } catch (err) {
        // En cas d'erreur de connexion, on log l'erreur mais on ne fait pas crash l'app
        logger("‚ùå Error connecting to database:", err);
    }
})();

// Cr√©ation d'un client de base de donn√©es personnalis√© qui wrap le pool PostgreSQL
const dbClient: DatabaseClient = {
    // R√©f√©rence vers le pool original pour acc√®s direct si n√©cessaire
    originalClient: pool,

    // M√©thode query personnalis√©e qui ajoute du logging et du monitoring
    async query(query) {
        // Incr√©mentation du compteur de requ√™tes pour le debugging
        queryCount += 1;
        logger(`Request n¬∞ ${queryCount}`);

        // Logs comment√©s pour √©viter d'afficher les requ√™tes sensibles en production
        // Utiles pour le debugging en d√©veloppement
        // logger("   Query: ", query.text);
        // logger("   Values: ", query.values);

        // Ex√©cution de la requ√™te via le pool original
        return this.originalClient.query(query);
    },
};

// Export du client personnalis√© pour utilisation dans les autres modules
export default dbClient;